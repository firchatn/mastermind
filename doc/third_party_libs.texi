@node Third party libraries
@chapter Third party libraries


To improve software fonctionality and protablity, we used third party libraries on booth mastermind user interface front-ends implementations.

@section Command line interface

Command line interface applications are very common on Unix systems. Most of cli applications use a set of common libraries (booth standards and third party libraries) to provide a minumal level of usability. We made use of the most common libraries.

@cindex Readline
@subsection Readline

Readline is part of the bash project. It provides a system independent powerful command line auto-completion system.
We used Readline library to provide command completion on mastermindcli internel command line implementation.
By using the Readline library, we got more extra features like bash based shortcuts (ctrl + w to remove laste word, ctrl + l to clean screen,...).

@cindex Gettext
@subsection Gettext

Gettext is the GNU implemetation of POSIX localization standard and it's available on all Unix systems. It provdes an easy solution to support internationalization.
Gettext GNU implementation comes with a set of command line tools to extract strings from source files, generate/update translation files and compile them.

@cindex Getopt
@subsection Getopt

Getopt Library is a POSIX standard to provide a common solution to implement command line based arguments.
POSIX standard only supports short options, we used GNU implementation to support long options too.

@section Graphical user interface

@cindex SDL2
@subsection SDL2

There are many third party GUI libraries with different goals and technologies:

@cindex Widget Toolkits
@subsubsection Widget Toolkits

They are the common choose for desktop applcations. They came with a set of desktop-oriented widgets (menu, buttons, text input,...).
Mobile and Tablets based platforms have their own implementations too.

Examples: GTK, QT, Win32, Cocoa

Benefits:

@itemize @bullet
@item
simple
@item
many predefined widget
@end itemize

Disadvantages:

@itemize @bullet
@item
lot of unneeded features
@item
platform dependent
@item
does not work well on mobile/tablet platforms
@end itemize

@cindex Game Engines
@subsubsection Game Engnies

Game engines reduce the need to write a lot of code and remove the need to use platform specific APIs.

Benefits:

@itemize @bullet
@item
a lot simpler
@item
predefined graphical object
@item
a lot of visual effects
@item
multi-platform support
@end itemize

Disadvantages:

@itemize @bullet
@item
even more unneeded features
@item
very slow
@item
long execution time
@item
less C, more higher level scripting languages (Lua, python, C#, ...)
@end itemize

@cindex Context/Window Toolkits
@subsubsection Context/Window Toolkits

Context toolkits are a set of APIs to provide a drawing surface and drawing functions.
Context/window toolkits provide a set of APIs to open windows and handle events too.
Many third party libraries provide a 2D and 3D drawing APIs.

@cindex OpenGL
OpenGL is the standard API for multi-platform 3D drawing. 3D contexts/window toolkits provide an OpenGL implementation with system integration (e.g: GLFW)

Benefits:

@itemize @bullet
@item
all the power of 3D
@end itemize

Disadvantages:

@itemize @bullet
@item
3D is much more than we need or a simple game
@item
C + GLSL (OpenGL Shader Language: a scripting language for 3D drawing)
@end itemize

Most common multi-platform 2D drawing APIs are SDL and Cairo.

@cindex Cairo
Cairo is a very powerful 2D library, it's used on many applications (Firefox, Google Chrome) and as a backend for many toolkits (GTK, PDF libraries,...).

Benefits:

@itemize @bullet
@item
powerful 2D design API plus font support
@item
clean and stable API
@item
it has many backend: OpenGL, PNG, PDF, X11, ...
@item
It may be included as C++17 standard API even it's written on C.
@end itemize

Disadvantages:

@itemize @bullet
@item
It's just a Context toolkit, it has neither event handling support nor window management support
@end itemize

SDL2 is a 2D context/window toolkit. It's the de facto standard on game developement on Unix systems. And it's used by many popular Game engines.

Benefits:

@itemize @bullet
@item
Support almost every platform (win32, Linuw, Mac, iOS, Android, Blackberry, Web, BSDs, ...)
@item
has many extensions to provide different functions (net, font, music, ...)
@item
support tablets/mobile platform out the box
@end itemize

Disadvantages:

Well nothing for our simple use case.

We choosed SDL2 as Mastermind GUI backend.

@subsection Gettext

We used gettext library on GUI version too to support localization.
