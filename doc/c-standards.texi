@node C Standards
@chapter C Standards

While writing the code, we used C standard API and syntax to easily support multi compilers and platforms and to simplify the code.
Currently, mastermind code base compiles well on the five main compilers
(Visual Studio C compiler, GCC, Clang, AppleClang, Intel Compiler) with at least six offical supported platforms.

@section Standard API

We made use of C89 and C99 standard API on first class with some use of POSIX standard APIs and fallback to MS Windows specific functions when no standard alternative is provided on Windows.

@cindex C89/C99 APIs
@subsection C89/C99 APIs

@itemize @bullet
@item
stdio.h: fopen, fclose, printf, fprintf, scanf, fscanf, FILE, ...
@item
time.h: time
@item
stdlib.h: malloc, free, rand, srand, ...

@itemize @minus
@item
getenv: get environement variable
@item
strtol: convert string to long int
@end itemize

@item
string.h: strcmp, strlen, ...
@item
errno.h: errno (last system call error value)
@item
stdin.h: uint8_t (force variable memory size to be 8 bits)
@item
assert.h: assert
@end itemize

@cindex POSIX APIs
@subsection POSIX APIs

@itemize @bullet
@item
unistd.h: mkdir (make directory with specified permission)
@item
sys/stat.h: access (check application access permission to specified path)
@item
sys/utsname.h:

@itemize @minus
@item
uname: get system uname value
@item
struct utsname: system uname representation struct
@end itemize

@item
string.h: strndup (deplicate string on new malloced memory with n char at most)
@item
stdlib.h: srandom, random (POSIX rand more secure rand alternative)
@end itemize

@cindex Windows APIs
@subsection WINDOWS APIs

@itemize @bullet
@item
windows.h: CreateDirectory (create direcotry)
@end itemize

@cindex Syntax and Types
@section Syntax and Types

@itemize @bullet
@item
enum: when defining several related constants.
@item
struct: when defining several related variables.
@item
union: when defining several related types and only one to use.
@item
#define

@itemize @minus
@item
define a standalone constant
@item
define a macro (inlined function without call overhead)
@item
Include Guards to not include header file more than once
@end itemize

@item
Conditionals (build time conditions to only include code needed on target platform or selected features)
@item
Bitwise operators (flags support to pass more than a state on same variable)
@end itemize
